{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/compat/auth\";\nexport let LoggedInGuard = /*#__PURE__*/(() => {\n  class LoggedInGuard {\n    constructor(authService, router, fireAuth) {\n      this.authService = authService;\n      this.router = router;\n      this.fireAuth = fireAuth;\n    }\n\n    canActivate(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        //returns user to login screen when logged out and user token removed\n        yield this.authService.setRole();\n\n        if (this.router.url === '/logout' || this.router.url === '/' && this.authService.role == null) {\n          // console.log('logged out');\n          this.router.navigate(['/']);\n          return false;\n        } // determine if the user is logged in from this method.\n        else if (this.authService.getUser() == true) {\n          console.log(\"User is logged in\");\n          return true;\n        } //if 404 error has occured return to login page\n        else if (this.router.url === '/404') {\n          console.log(\"test4040\");\n          this.authService.logout();\n          this.router.navigate(['/']);\n          return false;\n        } else {\n          this.authService.redirectUrl = state.url;\n          this.router.navigate(['/']);\n          return false;\n        }\n      });\n    }\n\n  }\n\n  LoggedInGuard.ɵfac = function LoggedInGuard_Factory(t) {\n    return new (t || LoggedInGuard)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AngularFireAuth));\n  };\n\n  LoggedInGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggedInGuard,\n    factory: LoggedInGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return LoggedInGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}