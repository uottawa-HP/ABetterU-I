{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/fire/compat/auth\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(router, firestore, fireAuth) {\n      this.router = router;\n      this.firestore = firestore;\n      this.fireAuth = fireAuth; // currentUser: null;\n\n      this.user = false;\n      this.fireAuth.onAuthStateChanged(user => this.currentUser = user);\n    }\n\n    signIn(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.fireAuth.signInWithEmailAndPassword(email, password).then(res => {\n            localStorage.setItem('user', JSON.stringify(res.user));\n          });\n          this.tempUser = JSON.parse(localStorage.getItem(\"user\"));\n          this.email = this.tempUser.email;\n          console.log(\"the email signing in is: \" + this.email); // localStorage.setItem('user', JSON.stringify(user));\n\n          yield this.delay(100);\n          this.router.navigate(['/home']);\n          this.user = true;\n          return true;\n        } catch (error) {\n          console.log('Sign in failed', error);\n          return false;\n        }\n      });\n    } //creates user with in firebase auth\n\n\n    signUp(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          if (!email || !password) throw new Error('Invalid email and/or password');\n          yield this.fireAuth.createUserWithEmailAndPassword(email, password);\n          return true;\n        } catch (error) {\n          console.log('Sign in failed', error);\n          return false;\n        }\n      });\n    }\n\n    logout() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.fireAuth.signOut();\n          localStorage.removeItem('user');\n          console.log(localStorage.getItem('user'));\n          this.user = false;\n          this.role = \"\";\n          this.tempUser = null;\n          this.email = \"\";\n          yield this.delay(100);\n          console.log(\"Signed out\");\n          console.log(\"Email signed in with is: \" + this.email);\n          this.router.navigate(['/logout']);\n          return true;\n        } catch (error) {\n          console.log(\"Logout Failed\", error);\n          return false;\n        }\n      });\n    } //get current user from browser localStorage and remove the token if user\n    //is not signed in through firebase auth.\n\n\n    getUser() {\n      if (localStorage.getItem('user')) {\n        this.tempUser = JSON.parse(localStorage.getItem(\"user\"));\n        this.email = this.tempUser.email;\n        console.log(this.email);\n        return true;\n      }\n\n      var storageUser = localStorage.getItem('user');\n\n      if (storageUser) {\n        try {\n          this.fireAuth.currentUser = JSON.parse(storageUser);\n        } catch (e) {\n          localStorage.removeItem('user');\n        }\n      }\n\n      return true;\n    } //fetch role from firebase\n\n\n    getRole() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.getUser() == true || this.email != null) {\n          let userRef = this.firestore.collection('users', ref => ref.where('email', '==', this.email));\n          let query = userRef.valueChanges();\n          query.pipe(map(arr => arr[0])).subscribe(value => {\n            try {\n              this.role = value['role'];\n            } catch (e) {}\n          });\n          console.log(\"The role being set is: \" + this.role);\n        } // let userRef = this.firestore.collection('users', ref => ref.where('email', '==', this.email));\n        // let query = userRef.valueChanges();\n        // query.pipe(map(arr => arr[0])).subscribe(value => {\n        //   try {\n        //     this.role = value['role'];\n        //\n        //\n        //\n        //   } catch (e) {\n        //   }\n        // });\n        // console.log(\"The role being set is: \" + this.role);\n\n      });\n    } //method called by components to invoke role guard\n\n\n    setRole() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getRole();\n        yield this.delay(10);\n        console.log(this.role);\n      });\n    } // async setRole2(): Promise<void>{\n    //\n    //\n    //   this.getRole();\n    //   await this.delay(10);\n    //   console.log(this.role);\n    // }\n    //used to store status of logged in user (invokes logged in guard)\n\n\n    isLoggedIn() {\n      if (this.user != false) {\n        console.log(this.user);\n        return true;\n      } else {\n        console.log(this.user);\n        return false;\n      }\n    }\n\n    delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.AngularFireAuth));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}